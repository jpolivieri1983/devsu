on:
  push:
    branches: 
      - master

#env:
#  SERVICE: consumer
#  SERVICEC: Consumer

jobs:

  codebuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Self test
        id: selftest

    # Put your action repo here
    uses: jacobtomlinson/python-container-action@master

  - name: Check outputs
    run: |
      test "${{ steps.selftest.outputs.myOutput }}" == "Hello world"

      #DOCKERHUB_USERNAME
      #DOCKERHUB_TOKEN
      #docker login -u jolivieridocker
      #dckr_pat_iGq8tBBKE91VyFMunjf7R2luZBU


   ############### python
      jobs:
        lint:
          name: Lint
          runs-on: ubuntu-latest
          steps:
            - name: Set up Python 3.7
              uses: actions/setup-python@v1
              with:
                python-version: "3.7"
      
            - uses: actions/checkout@v1
      
            - name: Lint
              run: |
                pip install flake8
                flake8 main.py


###################################    DESARROLLO    ######################################################################################################################
  codebuild:
    name: Build DEV Image
   #if: contains(github.ref, 'dev')
    runs-on: ubuntu-latest
    steps:
      - name: Set enviroment
        id: enviroment
        run: |
          echo "Current branch is ${GITHUB_REF#refs/heads/}"
          echo "::set-output name=enviroment::${GITHUB_REF#refs/heads/}"
      - name: Send message to ms teams
        uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
        with:
         webhook: ${{ secrets.TEAMS_WEBHOOK }}
         message:  '${{ github.actor }} inicio el despliegue de ${{ github.repository }} en la rama ${{ steps.enviroment.outputs.enviroment }}. Puedes ver los detalles del workflow en: https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_QA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}
          aws-region: us-east-1
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 16.18.1
      - name: "Set Tokens (master)"
        run: |
          cp .env.template .env
          sed -i 's#AWS_ACCESS_KEY_ID=#AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_SES_APPDEV }}#g' .env
          sed -i 's#AWS_SECRET_ACCESS_KEY=#AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_SES_APPDEV }}#g' .env
          sed -i 's/AWS_BUCKET_NAME=/AWS_BUCKET_NAME=${{ VARS.AWS_BUCKET_NAME_APPDEV }}/g' .env
          sed -i 's/RABBITMQ_PASSWORD=/RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}/g' .env
          sed -i 's/RABBITMQ_HOST=/RABBITMQ_HOST=${{ vars.RABBITMQ_HOST_APPDEV }}/g' .env
          sed -i 's/RABBITMQ_USER=/RABBITMQ_USER=${{ vars.RABBITMQ_USER }}/g' .env
          sed -i 's/RABBITMQ_PROTOCOL=/RABBITMQ_PROTOCOL=${{ vars.RABBITMQ_PROTOCOL }}/g' .env
          sed -i 's/RABBITMQ_PORT=/RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}/g' .env
          sed -i 's|NODRIZE_DATABASE_URL=|NODRIZE_DATABASE_URL=${{ vars.NODRIZE_DATABASE_URL_APPDEV }}|g' .env
      - name: yarn install
        run: yarn install --ignore-engines
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: src
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} 
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: src/.scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sam-${{ steps.enviroment.outputs.enviroment }}-ecr-${{ env.SERVICE }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Send message to ms teams
        if: failure()
        uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
        with:
         webhook: ${{ secrets.TEAMS_WEBHOOK }}
         message: 'El despliegue de ${{ github.repository }} no se completo correctamente! Puedes ver los detalles del workflow en: https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}'

  deploy-dev:
    name: Deploy image in Dev 
    runs-on: USSRunner
    needs: build-dev
    steps:
      - name: Set enviroment
        id: enviroment
        run: |
          echo "Current branch is ${GITHUB_REF#refs/heads/}"
          echo "::set-output name=enviroment::${GITHUB_REF#refs/heads/}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_QA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}
          aws-region: us-east-1
      - name: Check out code
        uses: actions/checkout@v3
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: sam-${{ steps.enviroment.outputs.enviroment }}-td-${{ env.SERVICE }}.json
          container-name: sam-${{ steps.enviroment.outputs.enviroment }}-container${{ env.SERVICEC }}
          image: 296409946397.dkr.ecr.us-east-1.amazonaws.com/sam-${{ steps.enviroment.outputs.enviroment }}-ecr-${{ env.SERVICE }}:${{ github.sha }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sam-${{ steps.enviroment.outputs.enviroment }}-ECSservice${{ env.SERVICEC }}
          cluster: sam-${{ steps.enviroment.outputs.enviroment }}-cluster
          wait-for-service-stability: true
      - name: Send message to ms teams
        uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
        with:
         webhook: ${{ secrets.TEAMS_WEBHOOK }}
         message: 'El despliegue de ${{ github.repository }} en la rama ${{ steps.enviroment.outputs.enviroment }} se completo correctamente!'
      - name: Send message to ms teams
        if: failure()
        uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
        with:
         webhook: ${{ secrets.TEAMS_WEBHOOK }}
         message: 'El despliegue de ${{ github.repository }} no se completo correctamente! Puedes ver los detalles del workflow en: https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}'
  

