on:
  workflow_dispatch:  #manual execution
  push:               #automatic execution
    branches: 
      - main

#env:
#  DJANGO_SETTINGS_MODULE: './demo/settings'

#env:
#  SERVICE: consumer

#error en los unit test?

jobs:
  build_push:
    permissions:            #for vulnerability scan
      security-events: write 
      actions: read  

    runs-on: ubuntu-latest
    steps:
      - name: Set step BUILD
        id: enviroment
        run: |
          echo "This is BUILD step"
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0 
      
      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Database Migration
        run: |
          python manage.py makemigrations
          python manage.py migrate
          

# Unit testing using PyTest        
      - name: Set step UNIT TEST
        run: |
           echo "This is UNIT TEST step"
      
      #### DEBUG 
      #- name : /home/runner/work/devsu/devsu
      #  run : "ls /home/runner/work/devsu/devsu"
      #- name : machine ls $GITHUB_WORKSPACE
      #  run : "ls -la $GITHUB_WORKSPACE"
      #- name : machine ls $HOME
      #  working-directory : "."
      #  run : "ls -la $HOME"
      #### DEBUG 

      #python manage.py shell

      - name: Test with pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest 
        #pytest ./api/tests.py --doctest-modules --junitxml=junit/test-results.xml
        #pytest ./api/tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html 
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: tests/pytest-test-results.xml
        #always run this step to publish test results when there are test failures
        if: ${{ always() }}    
        

# Static Code Analysis using Ruff
      - name: Set step STATIC CODE
        run: |
           echo "This is STATIC CODE ANALYS step"
      
      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check --fix . --output-format json --output-file ruff-test-results.xml
        continue-on-error: true       #if detects an error and cannot fix it, then the pipeline should continue so it's not aborted  

      - name: Upload ruff test results
        uses: actions/upload-artifact@v3
        with:
          name: ruff-results
          path: tests/ruff-test-results.xml
        #always run this step to publish test results when there are test failures
        if: ${{ always() }}  
        
        
# Code Coverage Analaysis using PyTest-Cov
      - name: Set step CODE COVERAGE
        run: |
           echo "This is CODE COVERAGE step"       
    # aca puedo usar el coverage del pytest
      - name: Test with pytest-cov
        run: |
          python -m pip install --upgrade pip
          pip install pytest-cov
          pytest ./api/tests.py --cov=com --cov-report=xml --cov-report=html
        #pytest ./api/tests.py --doctest-modules --junitxml=junit/test-results.xml  
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-cov-results
          path: tests/pytest-cov-test-results.xml
        #always run this step to publish test results when there are test failures
        if: ${{ always() }}    


# Vulnerabilities Scan using CodeQL
      - name: Set step VULNERABILITY SCAN
        run: |
           echo "This is VULNERABILITY SCAN step"         

      #- name: Install dependencies
      #  run: |
      #    python -m pip install --upgrade pip
      #    if [ -f requirements.txt ];
      #    then pip install -r requirements.txt;
      #    fi
      #    echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          setup-python-dependencies: false    # override default behavior to avoid installing Python dependencies
           
      - name: Upload CodeQL test results
        uses: actions/upload-artifact@v3
        with:
          name: codeql-results
          path: tests/codeql-test-results.xml
        #always run this step to publish test results when there are test failures
        if: ${{ always() }}  
          
          
# Build Docker image and push it to Docker Hub
      - name: Set step DOCKER BUILD PUSH
        run: |
           echo "This is DOCKER BUILD PUSH job" 

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: jolivieridocker/devsu:latest